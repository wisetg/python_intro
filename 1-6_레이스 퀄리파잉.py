def circuit_preview():     #서킷 그려주는 함수
    import turtle     #터틀 정의
    t=turtle.Turtle()     #터틀정의
    t.left(30)     #서킷정보
    t.speed(1)
    t.forward(150)
    t.write("1번 직선")
    t.forward(200)
    t.write("1번 코너")
    t.right(120)
    t.forward(100)
    t.write("2번 코너")
    t.right(60)
    t.forward(170)
    t.write("3번 코너")
    t.left(30)
    t.forward(100)
    t.write("2번 직선")
    t.forward(100)
    t.write("4번 코너")
    t.left(65)
    t.forward(60)
    t.write("5번 코너")
    t.right(150)
    t.forward(100)
    t.write("3번 직선")
    t.forward(150)
    t.write("6번 코너")
    t.right(90)
    t.forward(75)
    t.write("7번 코너")
    t.right(90)
    t.forward(75)
    t.write("8번 코너")
    t.left(120)
    t.forward(75)
    t.write("9번 코너")
    t.right(75)
    t.forward(50)
    t.write("결승선\n")
    return

def right_90 ():     #오른쪽 90도 코스 함수
    global n     #전역번수 사용
    print("     _________________________________\n    /                \n   /          \n  /             \n /              우 ____________________\n/     중         /\n| 좌            /\n|              |\n|   ▲        |\n|              |")     #코스 그림
    a=int(input((" | 좌(1) 중(2) 우(3) 중에서 어느 쪽으로 가시겠습니까 : ")))     #위치 선택
    b=int(input((" | 고(1) 중(2) 저(3) 속도 중에서 어느 쪽으로 가시겠습니까 : ")))     #속도 선택
    if (a==3 and b==2):   #모든것을 다 잘 맞췄을 때
        print(" | @: 완벽한 조작 이었습니다!!!")   #코멘트 추가
    elif (a==3 and b!=2):     #속도가 틀렸을 때
        print(" | @: 속도가 잘못 되었습니다. 속도가 너무 빨라도 문제지만 너무 느려도 문제입니다. 적당히 중간으로 달려 주세요!")     #코멘트 추가
        n=n+0.311     #시간 추가
    elif (a!=3 and b==2):    #방향이 틀렸을 때
        print(" | @: 방향이 잘못되었습니다. 우측으로 붙어서 주행해주세요!")      #코멘트 추가
        n=n+0.313     #시간 추가
    else:     #모두 틀렸을 때
        print(" | @: 잘못된 선택들이었습니다! 우측으로 중간의 숙도로 진입해주세요!")    #코멘트 추가
        n=n+1.053     #시간 추가
    return      #다시 복귀

def right_U ():     #오른쪽 U자 코스 함수
    global n     #전역변수 사용
    print("     ____________________\n    /                    \ \n   /                      \ \n  /  좌                    \ \n /      중                   \\ \n|            우             |\n|             |             |\n|  ▲         |             |\n|             |             |\n|             |             |")    #코스 그림
    a=int(input((" | 좌(1) 중(2) 우(3) 중에서 어느 쪽으로 가시겠습니까 : ")))     #위치 선택
    b=int(input((" | 고(1) 중(2) 저(3) 속도 중에서 어느 쪽으로 가시겠습니까 : ")))     #속도 선택
    if (a==3 and b==3):     #모든것을 다 잘 맞췄을 때
        print(" | @: 완벽한 조작 이었습니다!!!")     #코멘트 추가
    elif (a==3 and b!=3):     #속도가 틀렸을 때
        print(" | @: 속도가 잘못 되었습니다. 최대한 저속으로 가야합니다!")     #코멘트 추가
        n=n+0.511     #시간 추가
    elif (a!=3 and b==3):     #위치가 틀렸을 때
        print(" | @: 방향이 잘못되었습니다. 우측으로 최대한 붙어서 주행해주세요!")     #코멘트 추가
        n=n+0.513     #시간 추가
    else:     #모두 틀렸을 때
        print(" | @: 잘못된 선택들이었습니다! 우측으로 저속 진입해주세요!")     #코멘트 추가
        n=n+1.353     #시간 추가
    return     #다시 복귀


def stright ():   #직선 코스 함수
    global n     #전역 변수 사용
    print("  |             |\n  |             |\n  |             |\n  |             |\n  | 좌   중    우 |\n  |             |\n  |             |\n  |             |\n  |             |\n  |   ▲         |\n  |             |\n  |             |\n  |             |")      #코스 그림
    print(" | @: 퀄리파잉에서는 자동으로 최고속도 주행이 됩니다. 본선에서는 앞차와의 간격을 좁히기 위해 DRS라는 것을 킬 수 있습니다.")     #코멘트 추가
    return     #다시 복귀


def left_90 ():     #왼쪽 90도 코스 함수
    global n     #전역변수 사용
    print("_________________________________     \n                                 \    \n                                  \   \n                                   \  \n                                    \ \n____________________  좌            \ \n                    \       중      \ \n                    \           우  |\n                    |               |\n                    |         ▲    |\n                    |               |\n                    |               |")      #코스 그림
    a=int(input((" | 좌(1) 중(2) 우(3) 중에서 어느 쪽으로 가시겠습니까 : ")))     #위치 선택
    b=int(input((" | 고(1) 중(2) 저(3) 속도 중에서 어느 쪽으로 가시겠습니까 : ")))     #속도 선택
    if (a==1 and b==2):     #모두 맞았을 때
        print(" | @: 완벽한 조작 이었습니다!!!")     #코멘트 추가
    elif (a==1 and b!=2):     #속도가 틀렸을 때
        print(" | @: 속도가 잘못 되었습니다. 속도가 너무 빨라도 문제지만 너무 느려도 문제입니다. 적당히 중간으로 달려 주세요!")     #코멘트 추가
        n=n+0.311     #시간 추가
    elif (a!=1 and b==2):     #위치가 틀렸을 때
        print(" | @: 방향이 잘못되었습니다. 좌측으로 붙어서 주행해주세요!")     #코멘트 추가
        n=n+0.313     #시간 추가
    else:     #모두 틀렸을 때
        print(" | @: 잘못된 선택들이었습니다! 좌측으로 중간의 숙도로 진입해주세요!")     #코멘트 추가
        n=n+1.053     #시간 추가
    return     #다시 복귀


def left_U ():     #왼쪽 U자 코스 함수
    global n     #전역변수 사용
    print("     ____________________\n    /                      \ \n   /                        \ \n  /                          |\n /            좌    중       \ \n|                      우  |\n|             |          ▲ |\n|             |             |\n|             |             |\n|             |             |")     #코스 그림
    a=int(input((" | 좌(1) 중(2) 우(3) 중에서 어느 쪽으로 가시겠습니까 : ")))     #위치 선택
    b=int(input((" | 고(1) 중(2) 저(3) 속도 중에서 어느 쪽으로 가시겠습니까 : ")))     #속도 선택
    if (a==1 and b==3):     #모두 맞았을 때
        print(" | @: 완벽한 조작 이었습니다!!!")     #코멘트 추가
    elif (a==1 and b!=3):     #속도가 틀렸을 때
        print(" | @: 속도가 잘못 되었습니다. 최대한 저속으로 가야합니다!")     #코멘트 추가
        n=n+0.511     #시간추가
    elif (a!=1 and b==3):     #위치가 틀렸을 때
        print(" | @: 방향이 잘못되었습니다. 좌측으로 최대한 붙어서 주행해주세요!")     #코멘트 추가
        n=n+0.513     #시간 추가
    else:     #모두 틀렸을 때
        print(" | @: 잘못된 선택들이었습니다! 좌측으로 저속 진입해주세요!")     #코멘트 추가
        n=n+1.353     #시간 추가
    return#다시 복귀


def qulifying ():     #퀄리파잉 진행 함수
    global n      #전역변수 사용
    for i in range (3):     #3변 반복
        print("=======================================\n | 피트 나가는 중....\n |")     #설명
        print(" | @: 1번 코너 진입합니다")     #코스 설명
        right_U()      #코스 함수 불러오기
        print("\n---------------------------------------\m | @: 2번 코너 진입합니다")     #코스 설명
        right_90()     #코스 함수 불러오기
        print("wn---------------------------------------\m | @: 3번 코너 진입합니다")
        left_90()
        print("\n---------------------------------------\m | @: 2번 직선구간에 진입합니다")
        stright()
        print("\n---------------------------------------\m | @: 4번 코너 진입합니다")
        left_90()
        print("\n---------------------------------------\m | @: 5번 코너 진입합니다")
        right_U()
        print("\n---------------------------------------\m | @: 3번 직선구간에 진입합니다")
        stright()
        print("\n---------------------------------------\m | @: 6번 코너 진입합니다")
        right_90()
        print("\n---------------------------------------\m | @: 7번 코너 진입합니다")
        right_90()
        print("\n---------------------------------------\m | @: 8번 코너 진입합니다")
        left_U()
        print("\n---------------------------------------\m | @: 9번 코너 진입합니다")
        right_90()
        qlist.append(n)     #시간을 리스트에 추가
        n=92.030     #시간을 다시 초기화






n=92.030     #시간 설정
qlist=[]     #리스트 설정

print("=======================================")     #보기 좋게 삽입
print(" |레이스 설명을 드리겠습니다 \n | \n | 당신의 자동차:▲ \n | \n |\n | 이 게임은 위치와 속도를 입력 받아 주행 시뮬레이션을 돌리는 게임입니다. \n |")     #게임 설명
print(" |\n |이제 서킷정보를 드리겠습니다 \n |\n | 이번 그랑프리의 서킷은 \n | 미국의 \" Circuit of the Americas\" 입니다. \n | 이곳의 최고기록은 92.030입니다.")     #서킷 정보 삽입
input(" |\n | 위의 사항들을 확인 하셨으면 아무 문자나 입력해주세요. \n | 아무 문자나 입력해주시면 서킷 설명이 시작됩니다.")     #확인 받기
circuit_preview()     #서킷 그려주는 함수 불러오기
print(" | \n | \"@\" 표시는 감독이 하는 조언입니다. \n | \n | 알맞은 방향과 속도를 선택해 주세요")     #게임 설명
print(" | \n | 퀄리파잉은 3번 진행됩니다.\n | 퀄리파잉에서 들어온 시간 순서대로 본선의 시작 순서가 결정됩니다")     #퀄리파잉 설명
print("=======================================\n | 자 이제 퀄리파잉을 시작하겠습니다!!!")     #퀄리파잉 진행 시작 문구
qulifying ()     #퀄리파잉 함수 불러오기
print("=======================================\n | \n | 당신의 퀄리파잉 기록은", qlist, "입니다.")     #퀄리파잉 값 리스트 출력
print(" | \n | 퀄리파잉이 종료 되었습니다. \n | 수고하셨습니다! \n=======================================")     #종료 출력
